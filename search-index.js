var searchIndex = {};
searchIndex["tokio_core"] = {"doc":"Mio bindings with streams and futures","items":[[3,"Sender","tokio_core","The transmission half of a channel used for sending messages to a receiver.",null,null],[3,"Receiver","","The receiving half of a channel used for processing messages sent by a\n`Sender`.",null,null],[3,"Loop","","An event loop.",null,null],[3,"LoopPin","","A non-sendable handle to an event loop, useful for manufacturing instances\nof `LoopData`.",null,null],[3,"LoopHandle","","Handle to an event loop, used to construct I/O objects, send messages, and\notherwise interact indirectly with the event loop itself.",null,null],[3,"AddSource","","A future which will resolve a unique `tok` token for an I/O object.",null,null],[3,"AddTimeout","","Return value from the `LoopHandle::add_timeout` method, a future that will\nresolve to a `TimeoutToken` to configure the behavior of that timeout.",null,null],[3,"TimeoutToken","","A token that identifies an active timeout.",null,null],[3,"IoToken","","A token that identifies an active timeout.",null,null],[3,"ReadinessStream","","A concrete implementation of a stream of readiness notifications for I/O\nobjects that originates from an event loop.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[0,"io","","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"Copy","tokio_core::io","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"ReadExact","","A future which can be used to easily read the entire contents of a stream\ninto a vector.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream\ninto a vector.",null,null],[3,"TaskIo","","Abstraction that allows inserting an I/O object into task-local storage,\nreturning a handle that can be split.",null,null],[3,"TaskIoRead","","The readable half of a `TaskIo&lt;T&gt;` instance returned from `TaskIo::split`.",null,null],[3,"TaskIoWrite","","The writable half of a `TaskIo&lt;T&gt;` instance returned from `TaskIo::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to\nanother.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the\nobject itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`,\nreturning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O\nobject `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to\nthe stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"poll","","",0,null],[11,"poll","","",1,null],[11,"poll","","",2,null],[11,"poll","","",3,null],[11,"new","","Returns a new future which represents the insertion of the I/O object\n`T` into task local storage, returning a `TaskIo&lt;T&gt;` handle to it.",4,{"inputs":[{"name":"t"}],"output":{"name":"taskio"}}],[11,"split","","For an I/O object which is both readable and writable, this method can\nbe used to split the handle into two independently owned halves.",4,null],[11,"read","","",4,null],[11,"write","","",4,null],[11,"flush","","",4,null],[11,"read","","",5,null],[11,"write","","",6,null],[11,"flush","","",6,null],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire\nslice.",7,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this\n`Window`.",7,null],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this\n`Window`.",7,null],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",7,null],[11,"start","","Returns the starting index of this window into the underlying buffer\n`T`.",7,null],[11,"end","","Returns the end index of this window into the underlying buffer\n`T`.",7,null],[11,"set_start","","Changes the starting index of this window to the index specified.",7,null],[11,"set_end","","Changes the end index of this window to the index specified.",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"poll","","",8,null],[6,"IoFuture","","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[11,"channel","tokio_core","Creates a new in-memory channel used for sending data across `Send +\n&#39;static` boundaries, frequently threads.",9,null],[11,"send","","Sends a message to the corresponding receiver of this sender.",10,null],[11,"clone","","",10,null],[11,"poll","","",11,null],[11,"add_source","","Add a new source to an event loop, returning a future which will resolve\nto the token that can be used to identify this source.",9,null],[11,"schedule_read","","Schedule the current future task to receive a notification when the\ncorresponding I/O object is readable.",9,null],[11,"schedule_write","","Schedule the current future task to receive a notification when the\ncorresponding I/O object is writable.",9,null],[11,"drop_source","","Unregister all information associated with a token on an event loop,\ndeallocating all internal resources assigned to the given token.",9,null],[11,"take_readiness","","Consumes the last readiness notification the token this source is for\nregistered.",12,null],[11,"poll","","",13,null],[11,"add_timeout","","Adds a new timeout to get fired at the specified instant, notifying the\nspecified task.",9,null],[11,"update_timeout","","Updates a previously added timeout to notify a new task instead.",9,null],[11,"cancel_timeout","","Cancel a previously added timeout.",9,null],[11,"poll","","",14,null],[11,"when","","Returns the instant in time when this timeout token will &quot;fire&quot;.",15,null],[11,"clone","","",9,null],[11,"clone","","",16,null],[11,"new","","Creates a new event loop, returning any error that happened during the\ncreation.",17,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Generates a handle to this event loop used to construct I/O objects and\nsend messages.",17,null],[11,"pin","","Returns a &quot;pin&quot; of this event loop which cannot be sent across threads\nbut can be used as a proxy to the event loop itself.",17,null],[11,"run","","Runs a future until completion, driving the event loop while we&#39;re\notherwise waiting for the future to complete.",17,null],[11,"spawn","","Spawns a new future into the event loop this handle is associated this.",9,null],[11,"handle","","Returns a reference to the underlying handle to the event loop.",16,null],[11,"spawn","","Spawns a new future on the event loop this pin is associated this.",16,null],[11,"new","","Creates a new readiness stream associated with the provided\n`loop_handle` and for the given `source`.",18,{"inputs":[{"name":"loophandle"},{"name":"e"}],"output":{"name":"readinessstreamnew"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",18,null],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",18,null],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is\nno longer readable, but it needs to be.",18,null],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is\nno longer writable, but it needs to be.",18,null],[11,"loop_handle","","Returns a reference to the event loop handle that this readiness stream\nis associated with.",18,null],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness\nstream is wrapping.",18,null],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness\nstream is wrapping.",18,null],[11,"drop","","",18,null],[11,"as_raw_fd","","",19,null],[11,"as_raw_fd","","",20,null],[11,"from_listener","","Create a new TCP listener from the standard library&#39;s TCP listener.",20,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",20,null],[11,"local_addr","","Returns the local address that this listener is bound to.",20,null],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener\naccepts.",20,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",20,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",20,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",20,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",20,null],[11,"fmt","","",20,null],[11,"tcp_listen","","Create a new TCP listener associated with this event loop.",9,null],[11,"tcp_connect","","Create a new TCP stream connected to the specified address.",9,null],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpStream`, connecting it to the address specified.",19,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",19,null],[11,"poll_write","","Test whether this socket is writey to be written to or not.",19,null],[11,"local_addr","","Returns the local address that this stream is bound to.",19,null],[11,"peer_addr","","Returns the remote address that this stream is connected to.",19,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",19,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",19,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",19,null],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",19,null],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",19,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",19,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",19,null],[11,"read","","",19,null],[11,"write","","",19,null],[11,"flush","","",19,null],[11,"fmt","","",19,null],[11,"timeout","","Creates a new timeout which will fire at `dur` time into the future.",9,null],[11,"timeout_at","","Creates a new timeout which will fire at the time specified by `at`.",9,null],[11,"poll","","",21,null],[11,"drop","","",21,null],[11,"as_raw_fd","","",22,null],[11,"udp_bind","","Create a new UDP socket bound to the specified address.",9,null],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",22,{"inputs":[{"name":"udpsocket"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",22,null],[11,"poll_read","","Test whether this socket is ready to be read or not.",22,null],[11,"poll_write","","Test whether this socket is writey to be written to or not.",22,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",22,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",22,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",22,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",22,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",22,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",22,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",22,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",22,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",22,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",22,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",22,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",22,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",22,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",22,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",22,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",22,null],[11,"fmt","","",22,null],[14,"try_nb","","A convenience macro for working with `io::Result&lt;T&gt;` from the `Read` and\n`Write` traits.",null,null]],"paths":[[3,"Copy"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"TaskIo"],[3,"TaskIoRead"],[3,"TaskIoWrite"],[3,"Window"],[3,"WriteAll"],[3,"LoopHandle"],[3,"Sender"],[3,"Receiver"],[3,"IoToken"],[3,"AddSource"],[3,"AddTimeout"],[3,"TimeoutToken"],[3,"LoopPin"],[3,"Loop"],[3,"ReadinessStream"],[3,"TcpStream"],[3,"TcpListener"],[3,"Timeout"],[3,"UdpSocket"]]};
initSearch(searchIndex);
