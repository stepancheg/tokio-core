initSidebarItems({"fn":[["copy","Creates a future which represents copying all the bytes from one object to another."],["flush","Creates a future which will entirely flush an I/O object and then yield the object itself."],["read_exact","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner."],["read_to_end","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided."],["write_all","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided."]],"struct":[["Copy","A future which will copy all data from a reader into a writer."],["Flush","A future used to fully flush an I/O object."],["ReadExact","A future which can be used to easily read the entire contents of a stream into a vector."],["ReadToEnd","A future which can be used to easily read the entire contents of a stream into a vector."],["TaskIo","Abstraction that allows inserting an I/O object into task-local storage, returning a handle that can be split."],["TaskIoRead","The readable half of a `TaskIo<T>` instance returned from `TaskIo::split`."],["TaskIoWrite","The writable half of a `TaskIo<T>` instance returned from `TaskIo::split`."],["Window","A owned window around an underlying buffer."],["WriteAll","A future used to write the entire contents of some data to a stream."]],"type":[["IoFuture","A convenience typedef around a `Future` whose error component is `io::Error`"],["IoStream","A convenience typedef around a `Stream` whose error component is `io::Error`"]]});